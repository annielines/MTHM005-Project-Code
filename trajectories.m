%% investigating how trajectories approach steady states

%% generate results
clear

N = 600; % set number of nodes
K = 6; % set degree

n = 100; % set number of data points to keep

% set parameter ranges
q_vec = [0.5, 1, 2];

% set initial condition m = 0
initial_1 = 0.5;

% loop over q values
for i = 1:length(q_vec)

    % initialise results as empty vectors
    rho_evolution_below = [];
    m_evolution_below = [];
    rho_evolution_above = [];
    m_evolution_above = [];

    % update current q value
    q = q_vec(i);

    % generate graph of fixed degree K with N nodes
    g = G_fixed_degree(N, K);

    % for p < p_c set max number model runs until it terminates
    if i == 1
        p = 0.5;
        max_steps = 100000;

    else
        p = 0.2;
        max_steps = 1000000;
    end

    % implement coevolutionary nonlinear voter model
    [~, ~, ~, ~, ~, rho_time_series,  opinion_1_time_series] = coev_nonlinear_voter_model(g, p, q, initial_1, max_steps);

    % save outputs for p < pc
    rho_evolution_below = rho_time_series;
    m_evolution_below = 2*opinion_1_time_series - 1;

    % for p > p_c set max number model runs until it terminates
    if i == 1
        p = 0.9;
        max_steps = 100000;
    else
        p = 0.8;
        max_steps = 1000000;
    end

    % implement coevolutionary nonlinear voter model
    [~, ~, ~, ~, ~, rho_time_series,  opinion_1_time_series] = coev_nonlinear_voter_model(g, p, q, initial_1, max_steps);

    % save outputs for p < pc
    rho_evolution_above = rho_time_series;
    m_evolution_above = 2*opinion_1_time_series - 1;

    % only keep n evenly spaced data points
    rho_evolution_below_n = rho_evolution_below(round(linspace(1, length(rho_evolution_below), n)));
    m_evolution_below_n = m_evolution_below(round(linspace(1, length(m_evolution_below), n)));
    rho_evolution_above_n = rho_evolution_above(round(linspace(1, length(rho_evolution_above), n)));
    m_evolution_above_n = m_evolution_above(round(linspace(1, length(m_evolution_above), n)));

    % re-label outputs for saving the data
    if i == 1
        mb1 = m_evolution_below_n;
        rhob1 = rho_evolution_below_n;
        ma1 = m_evolution_above_n;
        rhoa1 = rho_evolution_above_n;
    elseif i == 2
        mb2 = m_evolution_below_n;
        rhob2 = rho_evolution_below_n;
        ma2 = m_evolution_above_n;
        rhoa2 = rho_evolution_above_n;
    else
        mb3 = m_evolution_below_n;
        rhob3 = rho_evolution_below_n;
        ma3 = m_evolution_above_n;
        rhoa3 = rho_evolution_above_n;
    end

end

%% load results and plot graph for reproducibility
clear

% load saved data generated by previous section
load('trajectories.mat')

for i = 1:3

    subplot(1,3,1)
    hold on
    set(gca,'fontsize',16)
    title('(a) q = 0.5 (q < 1)', 'FontSize', 18)
    xlabel('m', 'FontSize', 16)
    ylabel('\rho', 'FontSize', 16)
    grid on; grid minor
    axis([-1 1 0 0.5])
    plot1 = plot(mb1, rhob1, '.', 'Color','#4C60A9', 'LineWidth', 2, 'MarkerSize', 18);
    plot2 = plot(ma1, rhoa1, 'x', 'Color','#DCAD04', 'LineWidth', 2, 'MarkerSize', 10);
    legend([plot1, plot2], 'p = 0.5', 'p = 0.9')

    subplot(1,3,2)
    hold on
    set(gca,'fontsize',16)
    title('(b) q = 1', 'FontSize', 18)
    xlabel('m', 'FontSize', 16)
    ylabel('\rho', 'FontSize', 16)
    grid on; grid minor
    axis([-1 1 0 0.5])
    plot1 = plot(mb2, rhob2, '.', 'Color','#4C60A9', 'LineWidth', 2, 'MarkerSize', 18);
    plot2 = plot(ma2, rhoa2, 'x', 'Color','#DCAD04', 'LineWidth', 2, 'MarkerSize', 10);
    legend([plot1, plot2], 'p = 0.2', 'p = 0.8')

    subplot(1,3,3)
    hold on
    set(gca,'fontsize',16)
    title('(c) q = 2 (q > 1)', 'FontSize', 18)
    xlabel('m', 'FontSize', 16)
    ylabel('\rho', 'FontSize', 16)
    grid on; grid minor
    axis([-1 1 0 0.5])
    plot1 = plot(mb3, rhob3, '.', 'Color','#4C60A9', 'LineWidth', 2, 'MarkerSize', 18);
    plot2 = plot(ma3, rhoa3, 'x', 'Color','#DCAD04', 'LineWidth', 2, 'MarkerSize', 10);
    legend([plot1, plot2], 'p = 0.2', 'p = 0.8')

end